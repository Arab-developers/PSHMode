#!/usr/bin/python3
import os
import sys

sys.path.append(__file__.rsplit("/", 2)[0] + "/lib")
from rich.console import Console
from rich.markdown import Markdown
from bs4 import BeautifulSoup
from N4Tools.Design import Text, Square, Color
from config import Config
from rich import print

DOCS_PATH = os.path.join(os.environ.get("VIRTUAL_ENV"), f"share/docs/{Config.get('settings', 'LANGUAGE')}")
DOC_NAME = "pshmode" if len(sys.argv) <= 1 else sys.argv[1]
DOC_FILE_PATH = os.path.join(DOCS_PATH, DOC_NAME.lower() + '.xml')
DOC_FILE_PATH_TOOLS = os.path.join(os.environ.get("VIRTUAL_ENV"), f"tools/{DOC_NAME.lower()}/README.md")
console = Console()

Text = Text()
Square = Square()
Color = Color()

TEXT_STYLE = {
    "usage": {
        "text": "[blue]$[/blue] ",
        "command_color": "yellow"
    },
    "commands": {
        "text": "",
        "command_color": "green"
    },
}


class DocsReader:
    def __init__(self, file):
        self.file = file
        with open(file, 'r') as f:
            doc = f.read()
        self.soup = BeautifulSoup(self.values_reader(doc), 'html.parser')

    @property
    def title(self):
        try:
            return self.soup.find('title').text
        except:
            return None

    @property
    def sections(self):
        data = {}
        for section in self.soup.find_all('section'):
            data[section['title']] = []
            for command in section.find_all('line'):
                data[section['title']] += [[command['command'], command.text]]
        return data

    def values_reader(self, text):
        text = text.replace('{{ TOOL_NAME }}', self.file.split('/')[-1].split('.')[0])
        return text

    def style(self):
        sections = []
        temp = 0
        for section_title, commands in self.sections.items():
            sections.append('')
            sections[temp] += f'[white][bold] {section_title.upper()}: [/bold][/white]\n'

            # commands
            tempFixwidth = [key[0] for key in commands]
            tempFixwidth = Text.full(tempFixwidth)
            tempCommands = [key[0] for key in commands]
            commands.sort()

            for command, helpMsg in commands:
                command = tempFixwidth[tempCommands.index(command)]
                if Config.get('settings', 'ARABIC_RESHAPER'):
                    helpMsg = Text.arabic(helpMsg)
                try:
                    text = TEXT_STYLE[section_title.lower()]["text"]
                    command_color = TEXT_STYLE[section_title.lower()]["command_color"]
                except KeyError:
                    text = ""
                    command_color = "yellow"
                sections[
                    temp] += f'   {text}[{command_color}]{command}[/{command_color}]{" " if command else ""}{helpMsg}\n'

            sections[temp] += '\n'
            temp += 1

        style = ''
        for section in sections:
            style += section

        print(style[:-2])


if os.path.exists(DOC_FILE_PATH):
    DocsReader(DOC_FILE_PATH).style()

elif os.path.exists(DOC_FILE_PATH_TOOLS):
    with open(DOC_FILE_PATH_TOOLS) as readme:
        markdown = Markdown(readme.read())
    console.print(markdown)

elif os.path.exists(DOC_NAME):
    with open(DOC_NAME) as readme:
        markdown = Markdown(readme.read())
    console.print(markdown)

else:
    print(f"# no doc help on '{DOC_NAME}'!")
