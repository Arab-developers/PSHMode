#!/usr/bin/python3
import os
import sys
sys.path.insert(0, os.environ.get("VIRTUAL_ENV") + "/tools/decode")

from rich.syntax import Syntax
from multiprocessing import Process
from rich.console import Console
from utils.pysource import FakeFunction, DecompilePyc
from algorithms.pyfile import open_python_file, get_file_type

console = Console()


def show_code(source: str, temp):
    if not temp:
        p = Process(target=show_code, args=(source, 1))
        p.start()
        p.join(5)
        if p.is_alive():
            p.kill()
            print("#\033[1;33m can't show the code because the file is too big!\033[0m")
    else:
        syntax = Syntax(source, "python", line_numbers=True)
        console.print(syntax)


def no_support():
    print("# No support currently! please wait for the new updates.")
    exit(0)


def save_file(source):
    with open(sys.argv[2], "w") as out:
        out.write(source)
    show_code(source, 0)


def decode_handler(filename, layers):
    source = open_python_file(filename)
    file_type = get_file_type(filename)

    if file_type == "zip":
       pass
    elif type(source) == str:
        source: Union[str, None, CodeType] = FakeFunction(source, filename).get_source()
    elif type(source) == bytes:
        source: str = DecompilePyc(filename).get_source()
    else:
        no_support()

    if type(source) == str:
        save_file(source)
        layers += 1

        print(f"# file-type: {file_type}")
        print(f"# layers: {layers}")
        if input("# stop? [y/enter]: ").strip() == "y":
            if input("# delete old file? [y/n]: ").strip() == "y":
                os.remove(sys.argv[1])
            exit(0)
        os.system("clear")
        main(layers=layers)
    else:
        no_support()


def main(layers=0):
    if len(sys.argv) < 3:
        os.system("readme decode")
        exit(0)
    
    filename = sys.argv[2 if layers else 1]
    if not os.path.isfile(filename):
        exit(f"# File '{filename}' not found!")

    decode_handler(filename, layers)


if __name__ == "__main__":
    main()
